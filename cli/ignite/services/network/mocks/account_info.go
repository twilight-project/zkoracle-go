// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	hd "github.com/cosmos/cosmos-sdk/crypto/hd"
	cryptotypes "github.com/cosmos/cosmos-sdk/crypto/types"

	keyring "github.com/cosmos/cosmos-sdk/crypto/keyring"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// AccountInfo is an autogenerated mock type for the AccountInfo type
type AccountInfo struct {
	mock.Mock
}

// GetAddress provides a mock function with given fields:
func (_m *AccountInfo) GetAddress() types.AccAddress {
	ret := _m.Called()

	var r0 types.AccAddress
	if rf, ok := ret.Get(0).(func() types.AccAddress); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.AccAddress)
		}
	}

	return r0
}

// GetAlgo provides a mock function with given fields:
func (_m *AccountInfo) GetAlgo() hd.PubKeyType {
	ret := _m.Called()

	var r0 hd.PubKeyType
	if rf, ok := ret.Get(0).(func() hd.PubKeyType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(hd.PubKeyType)
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *AccountInfo) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPath provides a mock function with given fields:
func (_m *AccountInfo) GetPath() (*hd.BIP44Params, error) {
	ret := _m.Called()

	var r0 *hd.BIP44Params
	if rf, ok := ret.Get(0).(func() *hd.BIP44Params); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hd.BIP44Params)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPubKey provides a mock function with given fields:
func (_m *AccountInfo) GetPubKey() cryptotypes.PubKey {
	ret := _m.Called()

	var r0 cryptotypes.PubKey
	if rf, ok := ret.Get(0).(func() cryptotypes.PubKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cryptotypes.PubKey)
		}
	}

	return r0
}

// GetType provides a mock function with given fields:
func (_m *AccountInfo) GetType() keyring.KeyType {
	ret := _m.Called()

	var r0 keyring.KeyType
	if rf, ok := ret.Get(0).(func() keyring.KeyType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(keyring.KeyType)
	}

	return r0
}

type NewAccountInfoT interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccountInfo creates a new instance of AccountInfo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccountInfo(t NewAccountInfoT) *AccountInfo {
	mock := &AccountInfo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
